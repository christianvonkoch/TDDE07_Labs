sigma_sq_n=(v0*sigma0_sq+(t(Y)%*%Y+t(my0)%*%omega0%*%my0-t(my_n)%*%omega_n%*%my_n))/v_n
# Simulate the joint posterior
sigma_sq_post=(v_n)*c(sigma_sq_n)/drawX
betaMatrix_post=matrix(0,nDraws,3)
x_vals=seq(0,1,0.001)
response_post_temp=matrix(0,1,length(x_vals)+1)
plot(temp$time, Y, main="Scatter plot of the temp data", col=blue)
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
for (i in 1:nDraws) {
temp=sapply(x_vals, calcRegr, betaMatrix=betaMatrix_post, row=i)
print("hej")
response_post_temp[i,]=temp
}
# Calculating the parameters for the posterior distribution
v_n=v0+length(temp$temp)
X=cbind(1, temp$time, temp$time^2)
Y=temp$temp
beta_hat=solve(t(X)%*%X)%*%t(X)%*%Y
my_n=solve(t(X)%*%X+omega0)%*%(t(X)%*%X%*%beta_hat+omega0%*%my0)
omega_n=t(X)%*%X+omega0
omega_n_Inv=solve(omega_n)
sigma_sq_n=(v0*sigma0_sq+(t(Y)%*%Y+t(my0)%*%omega0%*%my0-t(my_n)%*%omega_n%*%my_n))/v_n
# Simulate the joint posterior
sigma_sq_post=(v_n)*c(sigma_sq_n)/drawX
betaMatrix_post=matrix(0,nDraws,3)
x_vals=seq(0,1,0.001)
response_post_temp=matrix(0,1,length(x_vals)+1)
plot(temp$time, Y, main="Scatter plot of the temp data", col=blue)
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
for (i in 1:nDraws) {
temp=sapply(x_vals, calcRegr, betaMatrix=betaMatrix_post, row=i)
print(temp)
print("hej")
response_post_temp[i,]=temp
}
View(tjoff)
View(response_post_temp)
# Calculating the parameters for the posterior distribution
v_n=v0+length(temp$temp)
X=cbind(1, temp$time, temp$time^2)
Y=temp$temp
beta_hat=solve(t(X)%*%X)%*%t(X)%*%Y
my_n=solve(t(X)%*%X+omega0)%*%(t(X)%*%X%*%beta_hat+omega0%*%my0)
omega_n=t(X)%*%X+omega0
omega_n_Inv=solve(omega_n)
sigma_sq_n=(v0*sigma0_sq+(t(Y)%*%Y+t(my0)%*%omega0%*%my0-t(my_n)%*%omega_n%*%my_n))/v_n
# Simulate the joint posterior
sigma_sq_post=(v_n)*c(sigma_sq_n)/drawX
betaMatrix_post=matrix(0,nDraws,3)
x_vals=seq(0,1,0.001)
response_post_temp=matrix(0,nDraws,length(x_vals))
plot(temp$time, Y, main="Scatter plot of the temp data", col=blue)
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
for (i in 1:nDraws) {
temp=sapply(x_vals, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=temp
}
View(response_post_temp)
temp=sort(response_post_temp[,1])
# Calculating the parameters for the posterior distribution
v_n=v0+length(temp$temp)
X=cbind(1, temp$time, temp$time^2)
Y=temp$temp
beta_hat=solve(t(X)%*%X)%*%t(X)%*%Y
my_n=solve(t(X)%*%X+omega0)%*%(t(X)%*%X%*%beta_hat+omega0%*%my0)
omega_n=t(X)%*%X+omega0
omega_n_Inv=solve(omega_n)
sigma_sq_n=(v0*sigma0_sq+(t(Y)%*%Y+t(my0)%*%omega0%*%my0-t(my_n)%*%omega_n%*%my_n))/v_n
# Simulate the joint posterior
sigma_sq_post=(v_n)*c(sigma_sq_n)/drawX
betaMatrix_post=matrix(0,nDraws,3)
x_vals=seq(0,1,0.001)
response_post_temp=matrix(0,nDraws,length(x_vals))
plot(temp$time, Y, main="Scatter plot of the temp data", col=blue)
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
for (i in 1:nDraws) {
temp=sapply(x_vals, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=temp
}
response_post=c()
for (i in 1:length(x_vals)) {
temp=sort(response_post_temp[,i])
response_post=c(response_post, (temp[500]+temp[501])/2)
}
plot(temp$time, Y, main="Scatter plot of the temp data", col=blue)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
response_post_temp=matrix(0,nDraws,length(x_vals))
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue")
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
for (i in 1:nDraws) {
betaTemp=sapply(x_vals, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
for (i in 1:length(x_vals)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
# Simulate the joint posterior
sigma_sq_post=(v_n)*c(sigma_sq_n)/drawX
betaMatrix_post=matrix(0,nDraws,3)
x_vals=seq(0,1,0.001)
response_post_temp=matrix(0,nDraws,length(x_vals))
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue")
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
for (i in 1:nDraws) {
betaTemp=sapply(x_vals, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
for (i in 1:length(x_vals)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
}
# Calculating the parameters for the posterior distribution
v_n=v0+length(temp$temp)
X=cbind(1, temp$time, temp$time^2)
Y=temp$temp
beta_hat=solve(t(X)%*%X)%*%t(X)%*%Y
my_n=solve(t(X)%*%X+omega0)%*%(t(X)%*%X%*%beta_hat+omega0%*%my0)
omega_n=t(X)%*%X+omega0
omega_n_Inv=solve(omega_n)
sigma_sq_n=(v0*sigma0_sq+(t(Y)%*%Y+t(my0)%*%omega0%*%my0-t(my_n)%*%omega_n%*%my_n))/v_n
# Simulate the joint posterior
sigma_sq_post=(v_n)*c(sigma_sq_n)/drawX
betaMatrix_post=matrix(0,nDraws,3)
x_vals=seq(0,1,0.001)
response_post_temp=matrix(0,nDraws,length(x_vals))
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue")
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
for (i in 1:nDraws) {
betaTemp=sapply(x_vals, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
for (i in 1:length(x_vals)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
}
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
View(response_post_temp)
# Calculating the parameters for the posterior distribution
v_n=v0+length(temp$temp)
X=cbind(1, temp$time, temp$time^2)
Y=temp$temp
beta_hat=solve(t(X)%*%X)%*%t(X)%*%Y
my_n=solve(t(X)%*%X+omega0)%*%(t(X)%*%X%*%beta_hat+omega0%*%my0)
omega_n=t(X)%*%X+omega0
omega_n_Inv=solve(omega_n)
sigma_sq_n=(v0*sigma0_sq+(t(Y)%*%Y+t(my0)%*%omega0%*%my0-t(my_n)%*%omega_n%*%my_n))/v_n
# Simulate the joint posterior
sigma_sq_post=(v_n)*c(sigma_sq_n)/drawX
betaMatrix_post=matrix(0,nDraws,3)
response_post_temp=matrix(0,nDraws,length(temp$time))
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue", xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
}
lines(temp$time, response_post)
View(response_post_temp)
credInterval=matrix(0,0.95*length(temp$time), 2)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp))], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue", xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
View(response_post_temp)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue", xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue", xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue", xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue", xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue", xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
plot(temp$time, Y, main="Scatter plot of the temp data", col="blue", xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
# Simulate the joint posterior
sigma_sq_post=(v_n)*c(sigma_sq_n)/drawX
betaMatrix_post=matrix(0,nDraws,3)
response_post_temp=matrix(0,nDraws,length(temp$time))
for (i in 1:nDraws) {
betaMatrix_post[i,]=drawBeta(my_n, sigma_sq_post[i], omega_n_Inv)
}
hist(betaMatrix_post[,1], breaks=100, main="Marginal posterior for beta0")
hist(betaMatrix_post[,2], breaks=100, main="Marginal posterior for beta1")
hist(betaMatrix_post[,3], breaks=100, main="Marginal posterior for beta2")
plot(temp$time, Y, main="Plot of the temp data for different times", col="blue",
xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
title(sub="Grey bands = 95 % credible intervals for the predicted temperatures,
Black line = Median for the predicted temperatures")
title(sub="Grey bands = 95 % credible intervals for the predicted temperatures, Black line = Median for the predicted temperatures")
plot(temp$time, Y, main="Plot of the temp data for different times", col="blue",
xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
title(sub="Grey bands = 95 % credible intervals for the predicted temperatures, Black line = Median for the predicted temperatures")
plot(temp$time, Y, main="Plot of the temp data for different times", col="blue",
xlab="Time coefficient", ylab="Temp")
for (i in 1:nDraws) {
betaTemp=sapply(temp$time, calcRegr, betaMatrix=betaMatrix_post, row=i)
response_post_temp[i,]=betaTemp
}
response_post=c()
credInterval=matrix(0, length(temp$time), 2)
for (i in 1:length(temp$time)) {
sortedTemp=sort(response_post_temp[,i])
response_post=c(response_post, (sortedTemp[500]+sortedTemp[501])/2)
credInterval[i,]=c(sortedTemp[(0.025*length(sortedTemp)+1)], sortedTemp[(0.975*length(sortedTemp))])
}
lines(temp$time, response_post)
lines(temp$time, credInterval[,1], lty=21, col="gray")
lines(temp$time, credInterval[,2], lty=21, col="gray")
title(sub="Grey = 95 % credible intervals, Black = Median")
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
betaTEMP=calcMaxTemp(betaMatrix_post)
calcMaxTemp = function(betaMatrix) {
return(-betaMatrix[,2]/(2*betaMatrix[,3]))
}
betaTEMP=calcMaxTemp(betaMatrix_post)
calcMaxTemp = function(betaMatrix) {
return(-betaMatrix[,2]/(2*betaMatrix[,3]))
}
max_temp=c()
for (i in 1:nDraws) {
max_temp=c(max_temp, calcRegr(betaMatrix_post, i, calcMaxTemp(betaMatrix_post)))
}
hist(max_temp)
hist(max_temp, breaks=100)
calcMaxTemp(betaMatrix_post)
calcMaxTemp = function(betaMatrix) {
return(-betaMatrix[,2]/(2*betaMatrix[,3]))
}
max_temp=c()
for (i in 1:nDraws) {
max_temp=c(max_temp, calcRegr(betaMatrix_post, i, calcMaxTemp(betaMatrix_post)))
}
hist(max_temp, breaks=100)
calcRegr(betaMatrix_post, i, calcMaxTemp(betaMatrix_post))
calcRegr(betaMatrix_post, 1, calcMaxTemp(betaMatrix_post))
calcMaxTemp = function(betaMatrix) {
return(-betaMatrix[2]/(2*betaMatrix[3]))
}
max_temp=c()
for (i in 1:nDraws) {
max_temp=c(max_temp, calcRegr(betaMatrix_post, i, calcMaxTemp(betaMatrix_post[i])))
}
hist(max_temp, breaks=100)
calcMaxTemp = function(betaMatrix, row) {
return(-betaMatrix[row,2]/(2*betaMatrix[row,3]))
}
max_temp=c()
for (i in 1:nDraws) {
max_temp=c(max_temp, calcRegr(betaMatrix_post, i, calcMaxTemp(betaMatrix_post, i)))
}
hist(max_temp, breaks=100)
help(hist)
hist(max_temp, breaks=100, xlim=c(0,1))
hist(max_temp, breaks=100, xlim=c(0,100))
hist(max_temp, breaks=100, xlim=c(50,50))
hist(max_temp, breaks=100, xlim=c(-50,50))
hist(max_temp, breaks=1000, xlim=c(-50,50))
hist(max_temp, breaks=1000, xlim=c(-50,50), main="Frequency of temperatures simulated from xtilde")
hist(max_temp, breaks=1000, xlim=c(-50,50), main="Frequency of max temperatures simulated from xtilde")
hist(max_temp, breaks=1000, xlim=c(-50,50), main="Frequency of max temperatures simulated from xtilde",
xlab="Temperature")
hist(max_temp, breaks=1000, xlim=c(0,50), main="Frequency of max temperatures simulated from xtilde",
xlab="Temperature")
calcMaxTemp = function(betaMatrix, row) {
return(-betaMatrix[row,2]/(2*betaMatrix[row,3]))
}
time_max_temp=c()
for (i in 1:nDraws) {
time_max_temp=c(time_max_temp, calcMaxTemp(betaMatrix_post, i))
}
hist(time_max_temp, breaks=1000, xlim=c(0,50), main="Frequency of max temperatures simulated from xtilde",
xlab="Temperature")
calcMaxTemp = function(betaMatrix, row) {
return(-betaMatrix[row,2]/(2*betaMatrix[row,3]))
}
time_max_temp=c()
for (i in 1:nDraws) {
time_max_temp=c(time_max_temp, calcMaxTemp(betaMatrix_post, i))
}
hist(time_max_temp, breaks=1000, xlim=c(0,1), main="Frequency of max temperatures simulated from xtilde",
xlab="Temperature")
hist(time_max_temp, breaks=10000, xlim=c(0,1), main="Frequency of max temperatures simulated from xtilde",
xlab="Temperature")
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
hist(time_max_temp, breaks=1000, xlim=c(0,1), main="Frequency of max temperatures simulated from xtilde",
xlab="Temperature")
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
help(axis)
help(plot.window)
help("labels")
help(title)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab2/Lab2_Assignment1.R', echo=TRUE)
