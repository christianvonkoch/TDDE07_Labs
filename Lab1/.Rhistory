set.seed(12345)
betaValues= drawBetaValues(i, alpha0+s, beta0+f)
meanVector=c(meanVector, mean(betaValues))
stdVector=c(stdVector, calcMSE(i, mean(betaValues), betaValues))
}
plot(nVector, meanVector, main="Plot of how the mean converges with respect to number of draws",
xlab="Number of draws", ylab="Mean")
print(paste("The true value of the mean of the distribution is ", MeanOfPosterior))
plot(nVector, stdVector, main="Plot of how the std dev converges with respect to the number of draws",
xlab="Number of draws", ylab="Standard deviation")
print(paste("The true value of the standard deviation of the distribution is ", StdOfPosterior))
trueProb=1-pbeta(0.3, alpha0+s, beta0+f)
set.seed(12345)
draw10000=rbeta(10000, alpha0+s, beta0+f)
probHat=sum(draw10000>0.3)/10000
print(paste("The approximated probability of theta being larger than 0.3 is calculated to be", probHat, "and the true probability of theta being larger than 0.3 for the posterior distribution is", trueProb, "."))
# Reusing the 10000 draws made earlier
phi=log(draw10000/(1-draw10000))
hist(phi, breaks=20, main="Distribution of the log-odds")
plot(density(phi), main="Density function of phi")
library(geoR)
x=c(44, 25, 45, 52, 30, 63, 19, 50, 34, 67)
n=length(x)
my=3.7
#Function for calculating thao^2
calcThao = function(data, my, n) {
return(sum((log(data)-my)^2)/n)
}
thaosq=calcThao(x, my, n)
set.seed(12345)
drawX=rchisq(10000, n)
sigmasq=(n)*thaosq/drawX
xvals=seq(0.001, 3, 0.001)
plot(density(sigmasq), main="Density of sigma^2", sub="Black = simulated distribution, Red = actual distribution")
lines(xvals,dinvchisq(xvals, n, thaosq), col="red")
G=2*pnorm(sqrt(sigmasq/2), mean=0, sd=1)-1
hist(G, breaks=100)
plot(density(G), main="Density function of simulated values of the Gini coefficient")
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab1/Lab1_Assignment2.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab1/Lab1_Assignment2.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab1/Lab1_Assignment2.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
alpha0=2
beta0=2
s=5
f=15
n=20
# Function for calculating the mean of a beta-distribution
calcMeanBeta = function(alpha, beta) {
return(alpha/(alpha+beta))
}
# Function for calculating the standard deviation of a beta-distribution
calcStdDevBeta = function(alpha, beta) {
return(sqrt(alpha*beta/((alpha+beta)^2*(alpha+beta+1))))
}
# Function for calculating the mean squared error of drawed data
calcMSE = function(n, mean, data){
return(sqrt(1/(n-1)*sum((data-mean)^2)))
}
# Function for drawing random values from the betadistribution
drawBetaValues = function(n, alpha, beta) {
return(rbeta(n, alpha, beta))
}
MeanOfPosterior = calcMeanBeta(alpha0+s, beta0+f)
StdOfPosterior = calcStdDevBeta(alpha0+s, beta0+f)
nVector = seq(1, 5000, 1)
meanVector=c()
stdVector=c()
for (i in nVector) {
set.seed(12345)
betaValues= drawBetaValues(i, alpha0+s, beta0+f)
meanVector=c(meanVector, mean(betaValues))
stdVector=c(stdVector, calcMSE(i, mean(betaValues), betaValues))
}
plot(nVector, meanVector, main="Plot of how the mean converges with respect to number of draws",
xlab="Number of draws", ylab="Mean")
print(paste("The true value of the mean of the distribution is ", MeanOfPosterior))
plot(nVector, stdVector, main="Plot of how the std dev converges with respect to the number of draws",
xlab="Number of draws", ylab="Standard deviation")
print(paste("The true value of the standard deviation of the distribution is ", StdOfPosterior))
trueProb=1-pbeta(0.3, alpha0+s, beta0+f)
set.seed(12345)
draw10000=rbeta(10000, alpha0+s, beta0+f)
probHat=sum(draw10000>0.3)/10000
print(paste("The approximated probability of theta being larger than 0.3 is calculated to be", probHat, "and the true probability of theta being larger than 0.3 for the posterior distribution is", trueProb, "."))
# Reusing the 10000 draws made earlier
phi=log(draw10000/(1-draw10000))
hist(phi, breaks=20, main="Distribution of the log-odds")
plot(density(phi), main="Density function of phi")
library(geoR)
x=c(44, 25, 45, 52, 30, 63, 19, 50, 34, 67)
n=length(x)
my=3.7
#Function for calculating thao^2
calcThao = function(data, my, n) {
return(sum((log(data)-my)^2)/n)
}
thaosq=calcThao(x, my, n)
set.seed(12345)
drawX=rchisq(10000, n)
sigmasq=(n)*thaosq/drawX
xvals=seq(0.001, 3, 0.001)
plot(density(sigmasq), main="Density of sigma^2", sub="Black = simulated distribution, Red = actual distribution")
lines(xvals,dinvchisq(xvals, n, thaosq), col="red")
G=2*pnorm(sqrt(sigmasq/2), mean=0, sd=1)-1
hist(G, breaks=100)
plot(density(G), main="Density function of simulated values of the Gini coefficient")
GSorted=sort(G)[(0.05*length(G)+1):(0.95*length(G))]
# 90 % credible interval for G through the simulated draws
G_CredInterval=c(min(GSorted),max(GSorted))
print(G_CredInterval)
plot(density(G), main="Density function of simulated values of the Gini coefficient with credible intervals")
abline(v = G_CredInterval[1], col="blue")
abline(v = G_CredInterval[2], col="blue")
GDensity=density(G)
GDensity.df=data.frame(x=GDensity$x, y=GDensity$y)
GDensity.df$y=cumsum(GDensity$y)/sum(GDensity$y)
GDensity_CredInterval_Vals=GDensity.df[GDensity.df$y>0.05 & GDensity.df$y<0.95,]
GDensity_CredInterval=c(min(GDensity_CredInterval_Vals$x), max(GDensity_CredInterval_Vals$x))
print(GDensity_CredInterval)
abline(v = GDensity_CredInterval[1], col="red")
abline(v = GDensity_CredInterval[2], col="red")
title(sub="Blue = Simulated credible interval, Red = Kernel estimated credible interval")
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
alpha0=2
beta0=2
s=5
f=15
n=20
# Function for calculating the mean of a beta-distribution
calcMeanBeta = function(alpha, beta) {
return(alpha/(alpha+beta))
}
# Function for calculating the standard deviation of a beta-distribution
calcStdDevBeta = function(alpha, beta) {
return(sqrt(alpha*beta/((alpha+beta)^2*(alpha+beta+1))))
}
# Function for calculating the mean squared error of drawed data
calcMSE = function(n, mean, data){
return(sqrt(1/(n-1)*sum((data-mean)^2)))
}
# Function for drawing random values from the betadistribution
drawBetaValues = function(n, alpha, beta) {
return(rbeta(n, alpha, beta))
}
MeanOfPosterior = calcMeanBeta(alpha0+s, beta0+f)
StdOfPosterior = calcStdDevBeta(alpha0+s, beta0+f)
nVector = seq(1, 5000, 1)
meanVector=c()
stdVector=c()
for (i in nVector) {
set.seed(12345)
betaValues= drawBetaValues(i, alpha0+s, beta0+f)
meanVector=c(meanVector, mean(betaValues))
stdVector=c(stdVector, calcMSE(i, mean(betaValues), betaValues))
}
plot(nVector, meanVector, main="Plot of how the mean converges with respect to number of draws",
xlab="Number of draws", ylab="Mean")
print(paste("The true value of the mean of the distribution is ", MeanOfPosterior))
plot(nVector, stdVector, main="Plot of how the std dev converges with respect to the number of draws",
xlab="Number of draws", ylab="Standard deviation")
print(paste("The true value of the standard deviation of the distribution is ", StdOfPosterior))
trueProb=1-pbeta(0.3, alpha0+s, beta0+f)
set.seed(12345)
draw10000=rbeta(10000, alpha0+s, beta0+f)
probHat=sum(draw10000>0.3)/10000
print(paste("The approximated probability of theta being larger than 0.3 is calculated to be", probHat, "and the true probability of theta being larger than 0.3 for the posterior distribution is", trueProb, "."))
# Reusing the 10000 draws made earlier
phi=log(draw10000/(1-draw10000))
hist(phi, breaks=20, main="Distribution of the log-odds")
plot(density(phi), main="Density function of phi")
library(geoR)
x=c(44, 25, 45, 52, 30, 63, 19, 50, 34, 67)
n=length(x)
my=3.7
#Function for calculating thao^2
calcThao = function(data, my, n) {
return(sum((log(data)-my)^2)/n)
}
thaosq=calcThao(x, my, n)
set.seed(12345)
drawX=rchisq(10000, n)
sigmasq=(n)*thaosq/drawX
xvals=seq(0.001, 3, 0.001)
plot(density(sigmasq), main="Density of sigma^2", sub="Black = simulated distribution, Red = actual distribution")
lines(xvals,dinvchisq(xvals, n, thaosq), col="red")
G=2*pnorm(sqrt(sigmasq/2), mean=0, sd=1)-1
hist(G, breaks=100)
plot(density(G), main="Density function of simulated values of the Gini coefficient")
GSorted=sort(G)[(0.05*length(G)+1):(0.95*length(G))]
# 90 % credible interval for G through the simulated draws
G_CredInterval=c(min(GSorted),max(GSorted))
print(G_CredInterval)
plot(density(G), main="Density function of simulated values of the Gini coefficient with credible intervals")
abline(v = G_CredInterval[1], col="blue")
abline(v = G_CredInterval[2], col="blue")
GDensity=density(G)
GDensity.df=data.frame(x=GDensity$x, y=GDensity$y)
GDensity.df$y=cumsum(GDensity$y)/sum(GDensity$y)
GDensity_CredInterval_Vals=GDensity.df[GDensity.df$y>0.05 & GDensity.df$y<0.95,]
GDensity_CredInterval=c(min(GDensity_CredInterval_Vals$x), max(GDensity_CredInterval_Vals$x))
print(GDensity_CredInterval)
abline(v = GDensity_CredInterval[1], col="red")
abline(v = GDensity_CredInterval[2], col="red")
title(sub="Blue = Simulated credible interval, Red = Kernel estimated credible interval")
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
alpha0=2
beta0=2
s=5
f=15
n=20
# Function for calculating the mean of a beta-distribution
calcMeanBeta = function(alpha, beta) {
return(alpha/(alpha+beta))
}
# Function for calculating the standard deviation of a beta-distribution
calcStdDevBeta = function(alpha, beta) {
return(sqrt(alpha*beta/((alpha+beta)^2*(alpha+beta+1))))
}
# Function for calculating the mean squared error of drawed data
calcMSE = function(n, mean, data){
return(sqrt(1/(n-1)*sum((data-mean)^2)))
}
# Function for drawing random values from the betadistribution
drawBetaValues = function(n, alpha, beta) {
return(rbeta(n, alpha, beta))
}
MeanOfPosterior = calcMeanBeta(alpha0+s, beta0+f)
StdOfPosterior = calcStdDevBeta(alpha0+s, beta0+f)
nVector = seq(1, 5000, 1)
meanVector=c()
stdVector=c()
for (i in nVector) {
set.seed(12345)
betaValues= drawBetaValues(i, alpha0+s, beta0+f)
meanVector=c(meanVector, mean(betaValues))
stdVector=c(stdVector, calcMSE(i, mean(betaValues), betaValues))
}
plot(nVector, meanVector, main="Plot of how the mean converges with respect to number of draws",
xlab="Number of draws", ylab="Mean")
print(paste("The true value of the mean of the distribution is ", MeanOfPosterior))
plot(nVector, stdVector, main="Plot of how the std dev converges with respect to the number of draws",
xlab="Number of draws", ylab="Standard deviation")
print(paste("The true value of the standard deviation of the distribution is ", StdOfPosterior))
trueProb=1-pbeta(0.3, alpha0+s, beta0+f)
set.seed(12345)
draw10000=rbeta(10000, alpha0+s, beta0+f)
probHat=sum(draw10000>0.3)/10000
print(paste("The approximated probability of theta being larger than 0.3 is calculated to be", probHat, "and the true probability of theta being larger than 0.3 for the posterior distribution is", trueProb, "."))
# Reusing the 10000 draws made earlier
phi=log(draw10000/(1-draw10000))
hist(phi, breaks=20, main="Distribution of the log-odds")
plot(density(phi), main="Density function of phi")
library(geoR)
x=c(44, 25, 45, 52, 30, 63, 19, 50, 34, 67)
n=length(x)
my=3.7
#Function for calculating thao^2
calcThao = function(data, my, n) {
return(sum((log(data)-my)^2)/n)
}
thaosq=calcThao(x, my, n)
set.seed(12345)
drawX=rchisq(10000, n)
sigmasq=(n)*thaosq/drawX
xvals=seq(0.001, 3, 0.001)
plot(density(sigmasq), main="Density of sigma^2", sub="Black = simulated distribution, Red = actual distribution")
lines(xvals,dinvchisq(xvals, n, thaosq), col="red")
G=2*pnorm(sqrt(sigmasq/2), mean=0, sd=1)-1
hist(G, breaks=100)
plot(density(G), main="Density function of simulated values of the Gini coefficient")
GSorted=sort(G)[(0.05*length(G)+1):(0.95*length(G))]
# 90 % credible interval for G through the simulated draws
G_CredInterval=c(min(GSorted),max(GSorted))
print(G_CredInterval)
plot(density(G), main="Density function of the Gini coefficient with credible intervals")
abline(v = G_CredInterval[1], col="blue")
abline(v = G_CredInterval[2], col="blue")
GDensity=density(G)
GDensity.df=data.frame(x=GDensity$x, y=GDensity$y)
GDensity.df$y=cumsum(GDensity$y)/sum(GDensity$y)
GDensity_CredInterval_Vals=GDensity.df[GDensity.df$y>0.05 & GDensity.df$y<0.95,]
GDensity_CredInterval=c(min(GDensity_CredInterval_Vals$x), max(GDensity_CredInterval_Vals$x))
print(GDensity_CredInterval)
abline(v = GDensity_CredInterval[1], col="red")
abline(v = GDensity_CredInterval[2], col="red")
title(sub="Blue = Simulated credible interval, Red = Kernel estimated credible interval")
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
alpha0=2
beta0=2
s=5
f=15
n=20
# Function for calculating the mean of a beta-distribution
calcMeanBeta = function(alpha, beta) {
return(alpha/(alpha+beta))
}
# Function for calculating the standard deviation of a beta-distribution
calcStdDevBeta = function(alpha, beta) {
return(sqrt(alpha*beta/((alpha+beta)^2*(alpha+beta+1))))
}
# Function for calculating the mean squared error of drawed data
calcMSE = function(n, mean, data){
return(sqrt(1/(n-1)*sum((data-mean)^2)))
}
# Function for drawing random values from the betadistribution
drawBetaValues = function(n, alpha, beta) {
return(rbeta(n, alpha, beta))
}
MeanOfPosterior = calcMeanBeta(alpha0+s, beta0+f)
StdOfPosterior = calcStdDevBeta(alpha0+s, beta0+f)
nVector = seq(1, 5000, 1)
meanVector=c()
stdVector=c()
for (i in nVector) {
set.seed(12345)
betaValues= drawBetaValues(i, alpha0+s, beta0+f)
meanVector=c(meanVector, mean(betaValues))
stdVector=c(stdVector, calcMSE(i, mean(betaValues), betaValues))
}
plot(nVector, meanVector, main="Plot of how the mean converges with respect to number of draws",
xlab="Number of draws", ylab="Mean")
print(paste("The true value of the mean of the distribution is ", MeanOfPosterior))
plot(nVector, stdVector, main="Plot of how the std dev converges with respect to the number of draws",
xlab="Number of draws", ylab="Standard deviation")
print(paste("The true value of the standard deviation of the distribution is ", StdOfPosterior))
trueProb=1-pbeta(0.3, alpha0+s, beta0+f)
set.seed(12345)
draw10000=rbeta(10000, alpha0+s, beta0+f)
probHat=sum(draw10000>0.3)/10000
print(paste("The approximated probability of theta being larger than 0.3 is calculated to be", probHat, "and the true probability of theta being larger than 0.3 for the posterior distribution is", trueProb, "."))
# Reusing the 10000 draws made earlier
phi=log(draw10000/(1-draw10000))
hist(phi, breaks=20, main="Distribution of the log-odds")
plot(density(phi), main="Density function of phi")
library(geoR)
x=c(44, 25, 45, 52, 30, 63, 19, 50, 34, 67)
n=length(x)
my=3.7
#Function for calculating thao^2
calcThao = function(data, my, n) {
return(sum((log(data)-my)^2)/n)
}
thaosq=calcThao(x, my, n)
set.seed(12345)
drawX=rchisq(10000, n)
sigmasq=(n)*thaosq/drawX
xvals=seq(0.001, 3, 0.001)
plot(density(sigmasq), main="Density of sigma^2", sub="Black = simulated distribution, Red = actual distribution")
lines(xvals,dinvchisq(xvals, n, thaosq), col="red")
G=2*pnorm(sqrt(sigmasq/2), mean=0, sd=1)-1
hist(G, breaks=100)
plot(density(G), main="Density function of simulated values of the Gini coefficient")
GSorted=sort(G)[(0.05*length(G)+1):(0.95*length(G))]
# 90 % credible interval for G through the simulated draws
G_CredInterval=c(min(GSorted),max(GSorted))
print(G_CredInterval)
plot(density(G), main="Density function of the Gini coefficient with credible intervals")
abline(v = G_CredInterval[1], col="blue")
abline(v = G_CredInterval[2], col="blue")
GDensity=density(G)
GDensity.df=data.frame(x=GDensity$x, y=GDensity$y)
GDensity.df$y=cumsum(GDensity$y)/sum(GDensity$y)
GDensity_CredInterval_Vals=GDensity.df[GDensity.df$y>0.05 & GDensity.df$y<0.95,]
GDensity_CredInterval=c(min(GDensity_CredInterval_Vals$x), max(GDensity_CredInterval_Vals$x))
print(GDensity_CredInterval)
abline(v = GDensity_CredInterval[1], col="red")
abline(v = GDensity_CredInterval[2], col="red")
title(sub="Blue = Simulated credible interval, Red = Kernel estimated credible interval")
data_radian=c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02)
my=2.39
lambda=1
# Function for computing the vonMisesDistrib for a given dataset
vonMisesDistrib = function(kappa, data, my){
likelihood=1
for (i in data) {
likelihood=likelihood*exp(kappa*cos(i-my))/(2*pi*besselI(kappa, 0))
}
return(likelihood)
}
# Function for computing the exponential distribution
exponDistrib = function(data, lambda) {
return(1/lambda*exp(-1/lambda*data))
}
kappa_values=seq(0,10,0.01)
# Function for computing the posterior distribution
posteriorDistrib = function(kappa, lambda, data, my) {
likelihood=vonMisesDistrib(kappa, data, my)
prior=exponDistrib(kappa, lambda)
return(likelihood*prior)
}
posteriorLikelihood=posteriorDistrib(kappa_values, lambda, data_radian, my)
plot(kappa_values, posteriorLikelihood, xlab="Kappa", ylab="Likelihood",
main="Posterior likelihood for different kappavalues", type="l", col="blue")
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab1/Lab1_Assignment3.R', echo=TRUE)
print(posteriorMode)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Lab1/Lab1_Assignment3.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
alpha0=2
beta0=2
s=5
f=15
n=20
# Function for calculating the mean of a beta-distribution
calcMeanBeta = function(alpha, beta) {
return(alpha/(alpha+beta))
}
# Function for calculating the standard deviation of a beta-distribution
calcStdDevBeta = function(alpha, beta) {
return(sqrt(alpha*beta/((alpha+beta)^2*(alpha+beta+1))))
}
# Function for calculating the mean squared error of drawed data
calcMSE = function(n, mean, data){
return(sqrt(1/(n-1)*sum((data-mean)^2)))
}
# Function for drawing random values from the betadistribution
drawBetaValues = function(n, alpha, beta) {
return(rbeta(n, alpha, beta))
}
MeanOfPosterior = calcMeanBeta(alpha0+s, beta0+f)
StdOfPosterior = calcStdDevBeta(alpha0+s, beta0+f)
nVector = seq(1, 5000, 1)
meanVector=c()
stdVector=c()
for (i in nVector) {
set.seed(12345)
betaValues= drawBetaValues(i, alpha0+s, beta0+f)
meanVector=c(meanVector, mean(betaValues))
stdVector=c(stdVector, calcMSE(i, mean(betaValues), betaValues))
}
plot(nVector, meanVector, main="Plot of how the mean converges with respect to number of draws",
xlab="Number of draws", ylab="Mean")
print(paste("The true value of the mean of the distribution is ", MeanOfPosterior))
plot(nVector, stdVector, main="Plot of how the std dev converges with respect to the number of draws",
xlab="Number of draws", ylab="Standard deviation")
print(paste("The true value of the standard deviation of the distribution is ", StdOfPosterior))
trueProb=1-pbeta(0.3, alpha0+s, beta0+f)
set.seed(12345)
draw10000=rbeta(10000, alpha0+s, beta0+f)
probHat=sum(draw10000>0.3)/10000
print(paste("The approximated probability of theta being larger than 0.3 is calculated to be", probHat, "and the true probability of theta being larger than 0.3 for the posterior distribution is", trueProb, "."))
# Reusing the 10000 draws made earlier
phi=log(draw10000/(1-draw10000))
hist(phi, breaks=20, main="Distribution of the log-odds")
plot(density(phi), main="Density function of phi")
library(geoR)
x=c(44, 25, 45, 52, 30, 63, 19, 50, 34, 67)
n=length(x)
my=3.7
#Function for calculating thao^2
calcThao = function(data, my, n) {
return(sum((log(data)-my)^2)/n)
}
thaosq=calcThao(x, my, n)
set.seed(12345)
drawX=rchisq(10000, n)
sigmasq=(n)*thaosq/drawX
xvals=seq(0.001, 3, 0.001)
plot(density(sigmasq), main="Density of sigma^2", sub="Black = simulated distribution, Red = actual distribution")
lines(xvals,dinvchisq(xvals, n, thaosq), col="red")
G=2*pnorm(sqrt(sigmasq/2), mean=0, sd=1)-1
hist(G, breaks=100)
plot(density(G), main="Density function of simulated values of the Gini coefficient")
GSorted=sort(G)[(0.05*length(G)+1):(0.95*length(G))]
# 90 % credible interval for G through the simulated draws
G_CredInterval=c(min(GSorted),max(GSorted))
print(G_CredInterval)
plot(density(G), main="Density function of the Gini coefficient with credible intervals")
abline(v = G_CredInterval[1], col="blue")
abline(v = G_CredInterval[2], col="blue")
GDensity=density(G)
GDensity.df=data.frame(x=GDensity$x, y=GDensity$y)
GDensity.df$y=cumsum(GDensity$y)/sum(GDensity$y)
GDensity_CredInterval_Vals=GDensity.df[GDensity.df$y>0.05 & GDensity.df$y<0.95,]
GDensity_CredInterval=c(min(GDensity_CredInterval_Vals$x), max(GDensity_CredInterval_Vals$x))
print(GDensity_CredInterval)
abline(v = GDensity_CredInterval[1], col="red")
abline(v = GDensity_CredInterval[2], col="red")
title(sub="Blue = Simulated credible interval, Red = Kernel estimated credible interval")
data_radian=c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02)
my=2.39
lambda=1
# Function for computing the vonMisesDistrib for a given dataset
vonMisesDistrib = function(kappa, data, my){
likelihood=1
for (i in data) {
likelihood=likelihood*exp(kappa*cos(i-my))/(2*pi*besselI(kappa, 0))
}
return(likelihood)
}
# Function for computing the exponential distribution
exponDistrib = function(data, lambda) {
return(1/lambda*exp(-1/lambda*data))
}
kappa_values=seq(0,10,0.01)
# Function for computing the posterior distribution
posteriorDistrib = function(kappa, lambda, data, my) {
likelihood=vonMisesDistrib(kappa, data, my)
prior=exponDistrib(kappa, lambda)
return(likelihood*prior)
}
posteriorLikelihood=posteriorDistrib(kappa_values, lambda, data_radian, my)
plot(kappa_values, posteriorLikelihood, xlab="Kappa", ylab="Likelihood",
main="Posterior likelihood for different kappavalues", type="l", col="blue")
posterior.df=data.frame(kappa=kappa_values, likelihood=posteriorLikelihood)
posteriorMode=subset(posterior.df, likelihood==max(likelihood), kappa)
print(posteriorMode$kappa)
