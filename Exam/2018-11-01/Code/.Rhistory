results[ncol(X)+1,1]=mean(bayes_lin_results$sigma2Sample)
results[ncol(X)+1,-1]=quantile(bayes_lin_results$sigma2Sample)
results[ncol(X)+1,-1]=quantile(bayes_lin_results$sigma2Sample, probs=c(0.025, 0.975))
covNames=append(covNames, "sigma2")
rownames(results)=covNames
colNames(results)=c("Posterior mean", "2,5%", "97,5%")
colnames(results)=c("Posterior mean", "2,5%", "97,5%")
results
median(bayes_lin_results$sigma2Sample)
results[ncol(X)+1,1]
X=cbind(X, subset(X, select=c("age", "temp"))^2)
View(X)
X=cbind(X, X[,2]*X[,3])
View(X)
covNames=append(covNames, c("age^2", "temp^2", "age*temp"))
mu_0=rep(0, ncol(X))
omega_0=0.01*diag(ncol(X))
v_0=1
sigma2_0=10000
nIter=5000
bayes_lin_results=BayesLinReg(y, X, mu_0, omega_0, v_0, sigma2_0, nIter)
results=matrix(0,ncol(X)+1,3)
for (i in 1:ncol(X)) {
results[i,1]=mean(bayes_lin_results$betaSample[i])
results[i,-1]=quantile(bayes_lin_results$betaSample[i], probs=c(0.025, 0.975))
}
results[ncol(X)+1,1]=mean(bayes_lin_results$sigma2Sample)
results[ncol(X)+1,-1]=quantile(bayes_lin_results$sigma2Sample, probs=c(0.025, 0.975))
covNames=append(covNames, "sigma2")
rownames(results)=covNames
colnames(results)=c("Posterior mean", "2,5%", "97,5%")
data=fish
y=data[,1]
X=as.matrix(data[,-1])
X=cbind(X, subset(X, select=c("age", "temp"))^2)
X=cbind(X, X[,2]*X[,3])
covNames=names(data[,-1])
covNames=append(covNames, c("age^2", "temp^2", "age*temp"))
mu_0=rep(0, ncol(X))
omega_0=0.01*diag(ncol(X))
v_0=1
sigma2_0=10000
nIter=5000
bayes_lin_results=BayesLinReg(y, X, mu_0, omega_0, v_0, sigma2_0, nIter)
results=matrix(0,ncol(X)+1,3)
for (i in 1:ncol(X)) {
results[i,1]=mean(bayes_lin_results$betaSample[i])
results[i,-1]=quantile(bayes_lin_results$betaSample[i], probs=c(0.025, 0.975))
}
results[ncol(X)+1,1]=mean(bayes_lin_results$sigma2Sample)
results[ncol(X)+1,-1]=quantile(bayes_lin_results$sigma2Sample, probs=c(0.025, 0.975))
covNames=append(covNames, "sigma2")
rownames(results)=covNames
colnames(results)=c("Posterior mean", "2,5%", "97,5%")
results
median(bayes_lin_results$sigma2Sample)
results[ncol(X)+1,1]
View(data)
tempData=data[1:11,]
View(tempData)
plot(tempData$length, tempData$age, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
postAge=subset(bayes_lin_results$betaSample, select="age")
View(data)
postAge=bayes_lin_results$betaSample[2]
View(bayes_lin_results)
postAge=bayes_lin_results$betaSample[,2]
bayes_lin_results$betaSample
View(bayes_lin_results)
results
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Exam/2018-11-01/2018-11-01_Assignment2.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Exam/2018-11-01/2018-11-01_Assignment2.R', echo=TRUE)
age_postMean=results[2,1]
View(data)
ageGrid=seq(0,160, 0.01)
betaMatrix=bayes_lin_results$betaSample
tempData=data[1:11,]
plot(tempData$length, tempData$age, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
credInt=matrix(0,length(ageGrid),2)
betaMatrix=bayes_lin_results$betaSample
tempData=data[1:11,]
plot(tempData$length, tempData$age, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
credInt=matrix(0,length(ageGrid),2)
count=1
for (a in ageGrid) {
fAge=betaMatrix%*%c(1,a,25,i^2, 25^2, i*25)
fPostMean=mean(fAge)
credInt[count,]=quantile(fAge, probs=c(0.025, 0.975))
count=count+1
}
lines(fPostMean, ageGrid, type="l", lwd=2, col="red")
fAge=rep(0,length(ageGrid))
fAgePostMean=rep(0,length(ageGrid))
count=1
fAge=rep(0,nIter)
betaMatrix=bayes_lin_results$betaSample
tempData=data[1:11,]
plot(tempData$length, tempData$age, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
credInt=matrix(0,length(ageGrid),2)
fAgePostMean=rep(0,length(ageGrid))
fAge=rep(0,nIter)
count=1
for (a in ageGrid) {
fAge=betaMatrix%*%c(1,a,25,i^2, 25^2, i*25)
fAgePostMean[count]=mean(fAge)
credInt[count,]=quantile(fAge, probs=c(0.025, 0.975))
count=count+1
}
lines(fAgePostMean, ageGrid, type="l", lwd=2, col="red")
lines(credInt[,1], col="grey", lty=2)
lines(credInt[,2], col="grey", lty=2)
lines(credInt[,1], col="grey", lty=2)
View(credInt)
betaMatrix=bayes_lin_results$betaSample
tempData=data[1:11,]
plot(tempData$length, tempData$age, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
credInt=matrix(0,length(ageGrid),2)
fAgePostMean=rep(0,length(ageGrid))
fAge=rep(0,nIter)
count=1
for (a in ageGrid) {
fAge=betaMatrix%*%c(1,a,25,i^2, 25^2, i*25)
fAgePostMean[count]=mean(fAge)
credInt[count,]=quantile(fAge, probs=c(0.025, 0.975))
count=count+1
}
lines(fAgePostMean, ageGrid, type="l", lwd=2, col="red")
lines(credInt[,1], col="grey", lty=2)
lines(credInt[,2], col="grey", lty=2)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Exam/2018-11-01/2018-11-01_Assignment2.R', echo=TRUE)
betaMatrix=bayes_lin_results$betaSample
tempData=data[1:11,]
plot(tempData$age, tempData$length, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
credInt=matrix(0,length(ageGrid),2)
fAgePostMean=rep(0,length(ageGrid))
fAge=rep(0,nIter)
count=1
for (a in ageGrid) {
fAge=betaMatrix%*%c(1,a,25,i^2, 25^2, i*25)
fAgePostMean[count]=mean(fAge)
credInt[count,]=quantile(fAge, probs=c(0.025, 0.975))
count=count+1
}
plot(tempData$length, tempData$age, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
credInt=matrix(0,length(ageGrid),2)
fAgePostMean=rep(0,length(ageGrid))
fAge=rep(0,nIter)
count=1
for (a in ageGrid) {
fAge=betaMatrix%*%c(1,a,25,i^2, 25^2, i*25)
fAgePostMean[count]=mean(fAge)
credInt[count,]=quantile(fAge, probs=c(0.025, 0.975))
count=count+1
}
lines(fAgePostMean, ageGrid, type="l", lwd=2, col="red")
lines(credInt[,1], ageGrid, col="grey", lty=2)
lines(credInt[,2], ageGrid, col="grey", lty=2)
fish_mod = cbind(fish,fish$age^2,fish$temp^2,fish$age*fish$temp)
names(fish_mod)[5:7] = c("age2","temp2","agetemp")
# m = glm(length ~ 0 + .,data=fish_mod)
# summary(m)
y = fish_mod$length
X = as.matrix(fish_mod[,2:7])
nCovs = dim(X)[2]
# Prior
mu_0 = rep(0,nCovs)
Omega_0 = 0.01*diag(nCovs)
v_0 = 1
sigma2_0 = 10000
nIter = 5000
Results = BayesLinReg(y, X, mu_0, Omega_0, v_0, sigma2_0, nIter)
# 2a
c(mean(Results$betaSample[,1]),quantile(Results$betaSample[,1], c(0.025, 0.975)))
c(mean(Results$betaSample[,2]),quantile(Results$betaSample[,2], c(0.025, 0.975)))
c(mean(Results$betaSample[,3]),quantile(Results$betaSample[,3], c(0.025, 0.975)))
c(mean(Results$betaSample[,4]),quantile(Results$betaSample[,4], c(0.025, 0.975)))
c(mean(Results$betaSample[,5]),quantile(Results$betaSample[,5], c(0.025, 0.975)))
c(mean(Results$betaSample[,6]),quantile(Results$betaSample[,6], c(0.025, 0.975)))
# 2b
mean(sqrt(Results$sigma2Sample))
median(sqrt(Results$sigma2Sample))
# 2c
n = 160
agrid = seq(1,n)
fmean = matrix(0,n,1)
fbands = matrix(0,n,2)
for(i in 1:n){
f = Results$betaSample %*% c(1,i,25,i^2,25^2,25*i)
fmean[i] = mean(f)
fbands[i,] = quantile(f,probs=c(.025,.975))
}
plot(fish_mod$age[1:11],fish_mod$length[1:11],type='p',xlab="age",ylab="length",
main="Posterior mean and bands",ylim=c(0,500))
lines(agrid,fmean)
lines(agrid,fbands[,1],col=2)
lines(agrid,fbands[,2],col=2)
betaMatrix=bayes_lin_results$betaSample
tempData=data[1:11,]
plot(tempData$length, tempData$age, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
betaMatrix=bayes_lin_results$betaSample
tempData=data[1:11,]
plot(tempData$age, tempData$length, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
credInt=matrix(0,length(ageGrid),2)
fAgePostMean=rep(0,length(ageGrid))
fAge=rep(0,nIter)
count=1
for (a in ageGrid) {
fAge=betaMatrix%*%c(1,a,25,i^2, 25^2, i*25)
fAgePostMean[count]=mean(fAge)
credInt[count,]=quantile(fAge, probs=c(0.025, 0.975))
count=count+1
}
lines(ageGrid,fAgePostMean, type="l", lwd=2, col="red")
betaMatrix=bayes_lin_results$betaSample
tempData=data[1:11,]
plot(tempData$length, tempData$age, main="Plot of data with 25 degrees temperature in tank", xlab="Length",
ylab="Age", col="blue")
ageGrid=seq(0,160, 0.01)
credInt=matrix(0,length(ageGrid),2)
fAgePostMean=rep(0,length(ageGrid))
fAge=rep(0,nIter)
count=1
for (a in ageGrid) {
fAge=betaMatrix%*%c(1,a,25,a^2, 25^2, a*25)
fAgePostMean[count]=mean(fAge)
credInt[count,]=quantile(fAge, probs=c(0.025, 0.975))
count=count+1
}
lines(fAgePostMean, ageGrid, type="l", lwd=2, col="red")
lines(credInt[,1], ageGrid, col="grey", lty=2)
lines(credInt[,2], ageGrid, col="grey", lty=2)
matrix(0,c(2,0), c(2,0))
diag(2)
diag(2,2)
solve(diag(2,2))
# Reading the data from file
load(file = 'weibull.RData')
data=weibull
help(weibuill)
help("rweibull")
data=weibull
logPrior=function(alphaBeta) {
return(-2*(log(alphaBeta[1])+log(alphaBeta[2])))
}
logPosterior = function(alphaBeta, data) {
alpha=alphaBeta[1]
beta=alphaBeta[2]
logPrior=logPrior(alphaBeta)
logLike=sum(dweibull(data, alpha, beta))
logPost=logLike+logPrior
if (abs(logPost) == Inf || is.na(logPost)) logPost = -20000;
return(logPost)
}
# Defining initial values to be passed on to the optimizer
set.seed(12345)
initVals = rnorm(2)
optimResult = optim(initVals, logPosterior, data=data, method=c("L-BFGS-B"),
lower=c(0.0001,0.0001), upper=c(Inf, Inf), control=list(fnscale=-1), hessian=TRUE)
warnings()
data=weibull
logPrior=function(alphaBeta) {
return(-2*(log(alphaBeta[1])+log(alphaBeta[2])))
}
logPosterior = function(alphaBeta, data) {
alpha=alphaBeta[1]
beta=alphaBeta[2]
logPrior=logPrior(alphaBeta)
logLike=sum(dweibull(data, alpha, beta, log=TRUE))
logPost=logLike+logPrior
if (abs(logPost) == Inf || is.na(logPost)) logPost = -20000;
return(logPost)
}
# Defining initial values to be passed on to the optimizer
set.seed(12345)
initVals = rnorm(2)
optimResult = optim(initVals, logPosterior, data=data, method=c("L-BFGS-B"),
lower=c(0.0001,0.0001), upper=c(Inf, Inf), control=list(fnscale=-1), hessian=TRUE)
# Defining the values of interest
postMode = optimResult$par
postCov = -solve(optimResult$hessian)
names(postMode) = c("alpha", "beta")
postMode
approx_PostStd = sqrt(diag(postCov))
names(approx_PostStd) = c("alpha", "beta")
print("The posterior mode is:")
print(postMode)
print("The approximated standard deviations are:")
print(approx_PostStd)
colnames(postCov) = c("alpha", "beta")
rownames(postCov) = c("alpha", "beta")
print("The posterior mode is:")
print(postMode)
print("The covariance matrix is:")
print(postCov)
post_matrix = matrix(0, nIter+burnIn, 2*length(c))
colnames=c()
for (i in 1:length(c)) {
colnames=c(colnames, c(paste("Alpha with c=", c[i], sep=""), paste("Beta with c=", c[i], sep="")))
}
nIter=2000
burnIn=500
alphaGamma=c(1,1)
c=c(0.1, 4, 100)
# Defining function for sampling through metropolishastings
RVMSampler = function(previousVal, postCov, c, myFunction, ...) {
proposalVal=rmvnorm(1, mean=previousVal, sigma=c*postCov)
proposalVal[proposalVal<=0]=1e-6
alpha=min(1, exp(myFunction(proposalVal,...)-myFunction(previousVal, ...)))
u=runif(1)
if(u < alpha) {
return(list(theta=proposalVal, acceptProb=alpha))
} else {
return(list(theta=previousVal, acceptProb=alpha))
}
}
post_matrix = matrix(0, nIter+burnIn, 2*length(c))
colnames=c()
for (i in 1:length(c)) {
colnames=c(colnames, c(paste("Alpha with c=", c[i], sep=""), paste("Beta with c=", c[i], sep="")))
}
# Setting initial values of beta to same initVals as in the optimizer (taken randomly from normal distrib)
post_matrix[1,]=alphaGamma
View(post_matrix)
# Setting initial values of beta to same initVals as in the optimizer (taken randomly from normal distrib)
post_matrix[1,]=alphaGamma
accProb=matrix(0, nIter, length(c))
set.seed(12345)
nIter=2000
burnIn=500
alphaGamma=c(1,1)
c=c(0.1, 4, 100)
# Defining function for sampling through metropolishastings
RVMSampler = function(previousVal, postCov, c, myFunction, ...) {
proposalVal=rmvnorm(1, mean=previousVal, sigma=c*postCov)
proposalVal[proposalVal<=0]=1e-6
alpha=min(1, exp(myFunction(proposalVal,...)-myFunction(previousVal, ...)))
u=runif(1)
if(u < alpha) {
return(list(theta=proposalVal, acceptProb=alpha))
} else {
return(list(theta=previousVal, acceptProb=alpha))
}
}
post_matrix = matrix(0, nIter+burnIn, 2*length(c))
colnames=c()
for (i in 1:length(c)) {
colnames=c(colnames, c(paste("Alpha with c=", c[i], sep=""), paste("Beta with c=", c[i], sep="")))
}
# Setting initial values of beta to same initVals as in the optimizer (taken randomly from normal distrib)
post_matrix[1,]=alphaGamma
accProb=matrix(0, nIter, length(c))
set.seed(12345)
for(i in 1:(nIter+burnIn)) {
for (j in 1:length(c)) {
if(i<(nIter+burnIn)) {
draw=RVMSampler(post_matrix[i,(2*j-1):(2*j)], postCov, c[i], logPosterior, data)
post_matrix[i+1,]=draw$theta
accProb[i+1]=draw$acceptProb
}
}
}
# Setting initial values of beta to same initVals as in the optimizer (taken randomly from normal distrib)
post_matrix[1,]=alphaGamma
accProb=matrix(0, nIter, length(c))
colnames(accProb)=c("c=0.1", "c=4", "c=100")
set.seed(12345)
for(i in 1:(nIter+burnIn)) {
for (j in 1:length(c)) {
if(i<(nIter+burnIn)) {
draw=RVMSampler(post_matrix[i,(2*j-1):(2*j)], postCov, c[i], logPosterior, data)
post_matrix[i+1,(2*j-1):(2*j)]=draw$theta
accProb[i+1,j]=draw$acceptProb
}
}
}
for(i in 1:(nIter+burnIn)) {
for (j in 1:length(c)) {
if(i<(nIter+burnIn)) {
draw=RVMSampler(post_matrix[i,(2*j-1):(2*j)], postCov, c[i], logPosterior, data)
post_matrix[i+1,(2*j-1):(2*j)]=draw$theta
accProb[i+1,j]=draw$acceptProb
}
}
}
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Exam/2018-11-01/2018-11-01_Assignment4.R', echo=TRUE)
# Setting initial values of beta to same initVals as in the optimizer (taken randomly from normal distrib)
post_matrix[1,]=alphaGamma
View(post_matrix)
# Defining function for sampling through metropolishastings
RVMSampler = function(previousVal, postCov, c, myFunction, ...) {
proposalVal=rmvnorm(1, mean=previousVal, sigma=c*postCov)
proposalVal[proposalVal<=0]=1e-6
alpha=min(1, exp(myFunction(proposalVal,...)-myFunction(previousVal, ...)))
u=runif(1)
if(u < alpha) {
return(list(theta=proposalVal, acceptProb=alpha))
} else {
return(list(theta=previousVal, acceptProb=alpha))
}
}
post_matrix = matrix(0, nIter+burnIn, 2*length(c))
colnames=c()
for (i in 1:length(c)) {
colnames=c(colnames, c(paste("Alpha with c=", c[i], sep=""), paste("Beta with c=", c[i], sep="")))
}
# Setting initial values of beta to same initVals as in the optimizer (taken randomly from normal distrib)
post_matrix[1,]=alphaGamma
accProb=matrix(0, nIter, length(c))
colnames(accProb)=c("c=0.1", "c=4", "c=100")
for (j in 1:length(c)) {
for(i in 1:(nIter+burnIn)) {
if(i<(nIter+burnIn)) {
draw=RVMSampler(post_matrix[i,(2*j-1):(2*j)], postCov, c[j], logPosterior, data)
post_matrix[i+1,(2*j-1):(2*j)]=draw$theta
accProb[i+1,j]=draw$acceptProb
}
}
}
post_matrix = matrix(0, nIter+burnIn, 2*length(c))
colnames=c()
for (i in 1:length(c)) {
colnames=c(colnames, c(paste("Alpha with c=", c[i], sep=""), paste("Beta with c=", c[i], sep="")))
}
# Setting initial values of beta to same initVals as in the optimizer (taken randomly from normal distrib)
post_matrix[1,]=alphaGamma
accProb=matrix(0, nIter+burnIn, length(c))
colnames(accProb)=c("c=0.1", "c=4", "c=100")
set.seed(12345)
for (j in 1:length(c)) {
for(i in 1:(nIter+burnIn)) {
if(i<(nIter+burnIn)) {
draw=RVMSampler(post_matrix[i,(2*j-1):(2*j)], postCov, c[j], logPosterior, data)
post_matrix[i+1,(2*j-1):(2*j)]=draw$theta
accProb[i+1,j]=draw$acceptProb
}
}
}
accProb_final=accProb[-(1:burnIn),]
accProb_mean=colMeans(accProb)
accProb_mean
post_matrix_final=post_matrix[-(1:burnIn), 3:4]
View(post_matrix_final)
View(post_matrix)
post_matrix=colnames
post_matrix = matrix(0, nIter+burnIn, 2*length(c))
colnames=c()
for (i in 1:length(c)) {
colnames=c(colnames, c(paste("Alpha with c=", c[i], sep=""), paste("Beta with c=", c[i], sep="")))
}
# Setting initial values of beta to same initVals as in the optimizer (taken randomly from normal distrib)
post_matrix[1,]=alphaGamma
accProb=matrix(0, nIter+burnIn, length(c))
colnames(accProb)=c("c=0.1", "c=4", "c=100")
set.seed(12345)
for (j in 1:length(c)) {
for(i in 1:(nIter+burnIn)) {
if(i<(nIter+burnIn)) {
draw=RVMSampler(post_matrix[i,(2*j-1):(2*j)], postCov, c[j], logPosterior, data)
post_matrix[i+1,(2*j-1):(2*j)]=draw$theta
accProb[i+1,j]=draw$acceptProb
}
}
}
accProb_final=accProb[-(1:burnIn),]
accProb_mean=colMeans(accProb)
accProb_mean
colnames(post_matrix)=colnames
View(post_matrix)
post_matrix_final=post_matrix[-(1:burnIn), 3:4]
View(post_matrix_final)
rownames=seq(501,2500)
rownames(post_matrix_final)=rownames
View(post_matrix_final)
postMean_alpha=mean(post_matrix_final[,1])
postMean_beta=mean(post_matrix_final[,2])
postVar_alpha=var(post_matrix_final[,1])
postVar_beta=var(post_matrix_final[,2])
post_matrix_final=post_matrix[-(1:burnIn), 3:4]
rownames=seq(501,2500)
rownames(post_matrix_final)=rownames
postMean_alpha=mean(post_matrix_final[,1])
postMean_beta=mean(post_matrix_final[,2])
postVar_alpha=var(post_matrix_final[,1])
postVar_beta=var(post_matrix_final[,2])
postMean_alpha
postMean_beta
postVar_alpha
postVar_beta
help(apply)
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Exam/2018-11-01/Code/Exam732A91_181101_Sol.R', echo=TRUE)
setwd("~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Exam/2018-11-01/Code")
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Exam/2018-11-01/Code/Exam732A91_181101_Sol.R', echo=TRUE)
install.packages("mvtnorm")
source('~/SKOLA/LIU/Åk 4/TDDE07/TDDE07_Labs/Exam/2018-11-01/2018-11-01_Assignment4.R', echo=TRUE)
View(post_matrix)
View(accProb)
